#include<bits/stdc++.h>
/*
    i <= k < j
    if (i >= j) => 0
    else min(dp[i][k] + dp[k+1][j] + (A[i-1]*A[j]*A[k])) 
*/

int dp[101][101];
int state(int i,int j, int* A) {
    // base case
    if(i >= j) {
        return 0;
    }
    if(dp[i][j] != -1) {
        return dp[i][j];
    }

    // transition
    int mini = 1e9;
    for(int k=i; k<j; k++) {
        mini = min(mini, state(i,k,A)+state(k+1,j,A)+A[i-1]*A[j]*A[k]);
    }
    dp[i][j] = mini;
    return mini;
}

int matrixChainMultiplication(int* arr, int n) {
    // cout<<n<<endl;
    n += 1;

    memset(dp, -1, sizeof dp);
    int ans = state(1, n-1, arr);
    return ans;
}